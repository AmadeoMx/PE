(name 'CTranslator-Richo.62' message '* Changed String>>asCIdentifier to take care of accents and special characters that might upset the compiler.* Changed all variable generations to send #asCIdentifier to the variable''s name. This fixes a bug in arduino when compiling a script named "guiÃ³n1".' id '53ba1c74-abab-7b43-9476-466bdb05d101' date '9 April 2012' time '4:58:04 pm' author 'Richo' ancestors ((name 'CTranslator-Richo.61' message '* Added an utility method in CProgram class to return the source code of a class.' id 'c94c54e7-a8ce-be43-b7ac-853482c93f87' date '30 March 2012' time '7:56:25 pm' author 'Richo' ancestors ((name 'CTranslator-Richo.60' message '* Implemented CObject class>>#basicNew, which was empty, so that we have a chance to debug the program directly in Smalltalk. Ideally, all primitive methods should have proper Smalltalk implementations. We''ll get there, eventually.' id 'b8181964-0dd6-e142-94e7-222648fc395d' date '29 March 2012' time '4:46:15 pm' author 'Richo' ancestors ((name 'CTranslator-Richo.59' message '* Added CTranslatedProgram>>asStringWithLineNumbers, which shows the program''s source with its line numbers' id '08ee190d-16dd-984e-8974-20e0cba1b3a3' date '27 March 2012' time '11:57:36 am' author 'Richo' ancestors ((name 'CTranslator-Richo.58' message '* Added two mandatory factory methods for C and C++ kits. This simplifies the kit implementation because now all subclasses should implement the same factory methods (or rely on inherited implementation).In summary, we have the following output objects:	- Program	- Struct		- Meta struct		- Primitive struct	- Function		- Meta function		- Primitive function	- Variable	- TypeSome of these are implemented for both C and C++, and others are shared. Look at Ckit and CppKit implementation.' id 'bcbe97d8-0504-3c4a-9325-4d3025b406ec' date '21 March 2012' time '7:47:01 pm' author 'Richo' ancestors ((name 'CTranslator-Richo.57' message '* Added #withBlanksTrimmed: to CFormatter because Pharo deprecated String>>#withBlanksTrimmed' id '6021c641-93c4-d949-b85f-b166f2ba7458' date '21 March 2012' time '3:01:49 pm' author 'Richo' ancestors ((name 'CTranslator-Richo.55' message '* Fixed CFormatter to avoid removing important semicolons after struct of class definitions.* Changed programs to return their formatted source and header.' id '31b9544b-d114-bc46-b5d0-35913bfd2ada' date '2 March 2012' time '6:00:13 pm' author 'Richo' ancestors ((name 'CTranslator-Richo.54' message '* Added a comment to CMethodTranslator.* Changed the way number literals are being printed, now it removes the trailing zeros.* Changed CTranslatedFunction>>#source to return the code formatted.' id '16d8d356-d632-0648-9b6f-7ee07bd5b0a7' date '1 March 2012' time '7:43:14 pm' author 'Richo' ancestors ((name 'CTranslator-Richo.53' message '* Added class comments to CFormatter and CTypeCollector.' id 'da0957a8-d57b-ec44-af95-442e00047ff5' date '1 March 2012' time '6:18:02 pm' author 'Richo' ancestors ((name 'CTranslator-Richo.52' message '* Added CFormatter, a simple utility to make autogenerated code human-readable.* Added category ''CTranslator-Utilities''. Moved in CPrimitiveRule and CTypeCollector.' id '25e63479-aedb-854a-a904-3f4138379daf' date '1 March 2012' time '5:50:25 pm' author 'Richo' ancestors ((name 'CTranslator-Richo.51' message '* Due to a difference in stream implementation between Squeak and Pharo I had to change the CPrimitiveRule>>#format: method to avoid sending #peekBack' id 'b1bea0e3-d8ca-f540-9c90-e17adcce87e8' date '22 February 2012' time '10:02:39 am' author 'Richo' ancestors ((name 'CTranslator-Richo.50' message '* Simplified CObject class>>#definition and CPrimitiveType class>>#definition.* Modified send to #upTo: (which is deprecated in Etoys and gone in Pharo) to #copyUpTo:* Removed send to #flattened' id '18345d1e-c872-1048-8311-65c5fa3e2bd1' date '22 February 2012' time '9:47:50 am' author 'Richo' ancestors ((name 'CTranslator-Richo.49' message '* Removed CppTranslatedMethod>>declaration since it was no different than its superclass''' id '1b35dfec-8f81-2f4b-ab96-ce6f7c4d82ae' date '13 January 2012' time '8:12:09 pm' author 'Richo' ancestors ((name 'CTranslator-Richo.48' message '* Refactored the CppTranslatedMethod class into CppTranslatedPrimMethod and CppTranslatedMetaMethod.' id 'b2f2a604-599c-184e-98c8-dc9f1bdb48c0' date '13 January 2012' time '8:09:15 pm' author 'Richo' ancestors ((name 'CTranslator-Richo.47' message '* Added a few classes to represent translated metaclasses and primitive classes. This fixes a few awful testing conditions when generating source code.' id '221052b1-7843-c447-bdcb-a6a539eabbf1' date '13 January 2012' time '7:42:24 pm' author 'Richo' ancestors ((name 'CTranslator-Richo.46' message '* Simplified CObject class>>#includes: and added posibility to hide superclass includes by reimplementing #allIncludes in the class side.' id 'ec15c867-82e1-ea4d-85e9-b394b1d81372' date '10 January 2012' time '2:22:10 pm' author 'Richo' ancestors ((name 'CTranslator-Richo.45' message '* Fixed the bug when sending a non-primitive message to a primitive object. Now the generated code works in Cpp by creating a class for the primitive type with all static methods.The code, however, is a work in progress. I came to the conclusion that only one class to represent translated classes is not enough. I might need at least three (regular class, primitive class, and meta class). The same goes for the translated methods (at least in C++), and maybe for translated types too, I need to think about it.' id 'e6be2969-bcb7-e74d-859b-609f547697eb' date '3 January 2012' time '6:33:59 pm' author 'Richo' ancestors ((name 'CTranslator-Richo.44' message '* Fixed the order of structs added to the program to avoid dependency problems (it still won''t allow circular dependencies)' id '7e057b3d-cfde-6b4b-bbc8-76b2fedd7228' date '3 January 2012' time '5:23:08 pm' author 'Richo' ancestors ((name 'CTranslator-Richo.43' message '* Fixed DNU when translating a class variable node' id 'c2e442f8-1e85-434b-8f07-31109d6663fb' date '3 January 2012' time '4:21:59 pm' author 'Richo' ancestors ((name 'CTranslator-Richo.42' message '* Added a method in CTranslatedProgram that returns all the includes' id '4824ff90-1030-bc4f-864d-62869a4e9b7d' date '29 December 2011' time '4:21:05 pm' author 'Richo' ancestors ((name 'CTranslator-Richo.41' message '* Changed CProgram class>>#includes: to generate a method that takes care of the superclasses includes and appends them to the current ones.' id 'aec7d9a7-4494-874e-8be6-86fc50688dae' date '29 December 2011' time '3:31:14 pm' author 'Richo' ancestors ((name 'CTranslator-Richo.40' message '* Changed CObject class>>#definition to let you specify a list of includes for your program.' id '86dbbfaa-89a0-cb4f-9d30-f81c48af95c3' date '28 December 2011' time '3:28:27 pm' author 'Richo' ancestors ((name 'CTranslator-Richo.39' message '* Added CByte primitive type.* Added inheritance of inst vars.* Added "c" pragma. It inlines the message first argument. It will throw an error if the method doesn''t accept paramenters.* Changed CNumber>>#timesRepeat: temporarily to use a for. This should be changed because it declares a variable that could collision with a user defined variable.' id '932b943f-6383-d045-9b73-becc467e7c46' date '24 October 2011' time '5:32:14 pm' author 'Richo' ancestors ((name 'CTranslator-Richo.38' message '* Fixed infinite loop when translating recursive methods.' id '39d0c590-1652-fc40-bfb3-7035cd2b892c' date '20 October 2011' time '4:30:49 pm' author 'Richo' ancestors ((name 'CTranslator-Richo.37' message 'empty log message' id '6fc8f326-571f-e34d-ae82-23ee91a72c7b' date '20 October 2011' time '4:02:23 pm' author 'Richo' ancestors ((name 'CTranslator-Richo.36' message '* Changed CType>>source because Etoys parser is complaining about a syntax error.' id '2f52a258-e659-4946-85d5-122a7ba00392' date '20 October 2011' time '1:49:55 am' author 'Richo' ancestors ((name 'CTranslator-Richo.35' message '* Recategorized translators and output classes into two different categories: C and Cpp.* Changed exceptions superclass to Notification.* Added a few comments.' id 'bc739ec4-1975-334b-82c3-9444dff60db2' date '14 October 2011' time '4:20:01 am' author 'Richo' ancestors ((name 'CTranslator-Richo.34' message '' id 'e5074c3f-9be5-2f4c-ad0d-003a491e1620' date '13 October 2011' time '5:54:22 am' author 'Richo' ancestors ((name 'CTranslator-Richo.33' message 'empty log message' id '6576cc04-468b-5a43-9921-949289c940a2' date '13 October 2011' time '4:54:15 am' author 'Richo' ancestors ((name 'CTranslator-Richo.32' message 'empty log message' id '9da5d666-acfe-3247-98be-98b91440fe61' date '13 October 2011' time '4:25:44 am' author 'Richo' ancestors ((name 'CTranslator-Richo.31' message '* Added translation of nil literal as NULL. This lets me use #isNil to compare if a value equals NULL but the programmer still needs to remember to initialize its variables to nil before using them. I need to find a simple way of doing this automatically (just as Squeak does it).* Fixed CLinkedList implementation.' id '8d58231f-26e5-de44-9f94-07f453db1ef0' date '12 October 2011' time '5:11 am' author 'Richo' ancestors ((name 'CTranslator-Richo.30' message '* Removed "methods" inst var from CTranslatedProgram. Now the program only has structs. And the structs have methods.' id '27320dd2-0480-c641-9ba8-90c357361ad7' date '11 October 2011' time '5:57:45 am' author 'Richo' ancestors ((name 'CTranslator-Richo.29' message '* Changed CTranslatedProgram>>#setName: to avoid the $_ prefix.' id 'f9421842-5b5f-cf4b-9c9c-3916c6bab11e' date '11 October 2011' time '5:12:40 am' author 'Richo' ancestors ((name 'CTranslator-Richo.28' message '* In the c function declaration apendded the class name before the selector so that we can have multiple methods with the same name but different classes. Not quite polymorphic, I know...* Changed the way the main method is recognized, now each method has a isMain flag. It''s not as clean as I might like (specially since CTranslatedFunction is bloated with inst vars) but it''s better than relying on the method name ending with ''main''.' id 'd31385c5-6a48-5245-8024-c74219898506' date '11 October 2011' time '11:03:50 am' author 'Richo' ancestors ((name 'CTranslator-Richo.27' message '* Removed inliners because it was bothering me a lot.* Added methods to create types to CKit. This hasn''t been overriden by CppKit yet, but now we can.* Added a kit variable to CTypeCollector so that we can change the type created.* Removed all CTypeCollector references that don''t come from a translator (because the translators are the only ones who know the kits).* Changed CInstVarToImplement to hold the translated variable and the translated struct instead of the variable node and the class.* Changed CTranslatedFunction to hold the returnType and its name. The method node was not necessary anymore so it was removed from the inst vars.' id '31da10f6-ad0b-c541-8431-5fac99770390' date '7 October 2011' time '7:51:44 am' author 'Richo' ancestors ((name 'CTranslator-Richo.26' message '* Removed CPointer.* Added CType. Now CTypeCollector must return an instance of CType instead of a class. But I kept the old behavior in the #findClass* methods because it was needed in a few places.* Renamed #asCType to #asCString to avoid confusion with the new class.* Removed support for using pointers in pragma types. Messing with pointers is too far away from Smalltalk, as Tera pointed out.* Removed CProgram3 because it was an example of the pointer usage.' id '810ad9bb-d66c-0d49-b67b-af6c680abac9' date '7 October 2011' time '7:02:36 am' author 'Richo' ancestors ((name 'CTranslator-Richo.25' message '* Simplified CTranslatedFunction>>returnType. Now, if the type found is not a primitive it returns a CPointer. This is contradictory with other methods returning types. I should check those and fix them appropriately.' id '04888711-f8e0-c744-878e-66e837e6ab03' date '29 September 2011' time '5:51:01 am' author 'Richo' ancestors ((name 'CTranslator-Richo.24' message '* I changed the name of the struct representing the class and the metaclass. I really don''t like all the changes I needed to do to make this change: this stuff is hardcoded in three different places CMethodTranslator>>acceptVariableNode:, CTranslatedStruct>>source, and CTranslatedVariable>>source. Look at the diff with the previous version if you don''t believe me. This situation *needs* to be fixed' id 'ae23a089-669f-324c-b4ae-4822ac9afae4' date '29 September 2011' time '5:48:56 am' author 'Richo' ancestors ((name 'CTranslator-Richo.23' message '* Renamed COutputBuilder and CppOutputBuilder to CKit and CppKit. Name inspired by Gamma''s book "Design patterns"* Added ClassDescription>>#ultimateCompiledMethodAt:ifAbsent:. This method was defined in the package SqueakNxt-Compiler, but it was needed here.' id 'eb0d1239-f4de-b34a-a2e2-30e41ea06b3e' date '28 September 2011' time '5:12:14 am' author 'Richo' ancestors ((name 'CTranslator-Richo.22' message '* Removed unused instance variables "arguments" and "temporaries" from CMethodTranslator' id 'ee8897e5-f586-a446-b2fc-126116ba38c9' date '29 July 2011' time '3:37:10 am' author 'Richo' ancestors ((name 'CTranslator-Richo.21' message '* Fixed a bug that was puting a "return this;" at the end of all sequence nodes instead of just at the end of all methods.' id 'd3a3d425-1034-4349-b3b2-7c5f69bdee6b' date '27 July 2011' time '6:07:39 am' author 'Richo' ancestors ((name 'CTranslator-Richo.20' message 'empty log message' id '8779d376-7875-bd4f-9eaf-4119e5029168' date '27 July 2011' time '5:17:30 am' author 'Richo' ancestors ((name 'CTranslator-Richo.19' message '* Fixed CppTranslator until example CProgram4.' id '519dc09c-711b-d54d-99fa-b9d0591f2060' date '27 July 2011' time '4:39:47 am' author 'Richo' ancestors ((name 'CTranslator-Richo.18' message '* CInliner not longer used anymore. Now inlining is prohibited because it was too difficult to get it right (maybe I''m too stupid, I guess).* Classes are now represented as a struct with a unique static instance called The_InsertNameHere_class. This code was put in CTranslatedStruct>>#source, I''m not really sure it belongs there, but for now it works.* If the method has no return at the end, I still store a "return self". So no more void methods. All methods *must* have a return type, and if the type is not explicit it assumes <returnType: #(yourself)>* The instance creation has been changed. Now it requires a special pragma called #creationMethod. I know the last implementation was nicer, but it lead to some troubles I couldn''t fix in an elegant way yet, because the "self" variable in the context of a metaclass must be translated as The_InsertNameHere_class, so the primitive ''({0}*)malloc(sizeof({0}))'' was not translated properly anymore. As an advantage, CppTranslator now only needs to override #storeInstanceCreation: to specify its own syntax.' id '38f72da9-c54f-fc44-9c48-2cc2e9ebf40b' date '27 July 2011' time '1:53 am' author 'Richo' ancestors ((name 'CTranslator-Richo.17' message '* Improved CInliner''s code (it is still a mess, though).* Method''s returning objects can also be inlined now.' id '7d06f077-3edd-4b40-972d-583f33576275' date '22 July 2011' time '7:39:09 am' author 'Richo' ancestors ((name 'CTranslator-Richo.16' message '* Added a CInliner which takes care of producing a flat parse tree so that CMethodTranslator won''t deal with inlined methods. It makes the translation much simpler but its current implementation is a little ugly (for instance, the methods are destructive). I''ll fix it sometime in the future...' id '8c7a343e-fa05-0349-9900-57da50fe2d46' date '21 July 2011' time '5:48:37 am' author 'Richo' ancestors ((name 'CTranslator-Richo.15' message '* Fixed #inlined methods with arguments. Now it creates a temporary variable for each argument.* All class methods are now implicitly #inlined.* Changed CTranslatedFunction to have the arguments and temporaries in separate variables. This variables are created by CMethodTranslator and passed by in the creator method. * When creating the source, CTranslatedFunction will iterate over the arguments and temporaries variables (it won''t look at the methodNode to find them). This allows the correct translation of inlined methods, which need to declare extra variables that are not found in the original method.' id '8a373987-b49a-1040-9860-a0a270e520b0' date '14 July 2011' time '5:46:25 am' author 'Richo' ancestors ((name 'CTranslator-Richo.14' message '' id '96fa88ab-0838-9f41-882e-d3c250a65b30' date '1 July 2011' time '6:31:13 am' author 'Richo' ancestors ((name 'CTranslator-Richo.13' message '* Instance creation in C is now working. Made a very simple Linked list implementation to test it. :)' id '43fcbe50-7a70-c44d-aae9-71fbbe32a4f1' date '1 July 2011' time '2:33:48 am' author 'Richo' ancestors ((name 'CTranslator-Richo.12' message '* I''m struggling with instance creation due to my limited experience with C. I''ve made lots of changes. Most things must be broken by now, I guess... The most important change I remember is that CMethodTranslator now only translates method bodies and not their declarations because the code was repeated in CTranslatedFunction.' id 'ec41657f-95b2-fa46-acf4-2a7eada5bafb' date '30 June 2011' time '6:41:10 am' author 'Richo' ancestors ((name 'CTranslator-Richo.11' message '* Added instance creation support. It works only in Cpp for now.' id 'fee7b127-57d9-bf41-87b3-4bdd344cbadf' date '29 June 2011' time '5:53:39 am' author 'Richo' ancestors ((name 'CTranslator-Richo.10' message '* Removed CTranslatedFunction>>#argumentTypes. Fixed only sender.' id 'ea4a7877-b724-c941-961c-c53e291bba4b' date '29 June 2011' time '12:30:55 pm' author 'Richo' ancestors ((name 'CTranslator-Richo.9' message '* Removed CProgramTranslator class>>defaultMainSelector and all hacks depending on this. Now String>>asCIdentifier adds by defaul a "_" prefix to the string, so the #main method won''t clash with the actual "main" function.* Started to play with "instance creation" methods. The type collector now accepts a class as the value of a variable node and it returns the correct type. The #new method in CObject implements the pragma <creationMethod> which tells the method translator to run special code.' id '366055fb-8611-424e-bc9a-12c262c1dc07' date '29 June 2011' time '11:44:02 am' author 'Richo' ancestors ((name 'CTranslator-Richo.8' message '* Renamed CStruct to CTranslatedStruct.* Renamed CVariable to CTranslatedVariable.* Renamed CppClass to CppTranslatedClass' id 'b39f1938-65f4-cb43-a373-9307b37fe611' date '28 June 2011' time '4:10:49 am' author 'Richo' ancestors ((name 'CTranslator-Richo.7' message '* Renamed method #storeMethodDeclaration: to #storeMethodSignature:' id 'e87c82a5-bcdc-5142-8ffe-f20f17fcc79b' date '28 June 2011' time '12:39:34 pm' author 'Richo' ancestors ((name 'CTranslator-Richo.6' message '* Refactored code a little. I added a COutputBuilder and CppOutputBuilder, which are responsible for creating the output objects.' id '96070fc1-1158-fd4f-bea5-ada8750c18c6' date '28 June 2011' time '12:26:38 pm' author 'Richo' ancestors ((name 'CTranslator-Richo.5' message '* Added #pointer and #address.* Recategorized methods from "nxc-*" to "c-*"* The pragma syntax #(CLong*) works now in tempTypes and argTypes.' id '271055bf-9d9b-c94c-b57e-c8b380dfd818' date '23 June 2011' time '6:01:17 am' author 'Richo' ancestors ((name 'CTranslator-Richo.4' message '* Added cpp translator. It''s a subclass of the c translator for now. It works but I''ll probably change it in the future. It''s still a little hackish...* Changed #returnType: pragma argument to accept an array of symbols instead of a symbol. This allows us to define pointer types like this: #(CLong*) which would be #(#CLong #*). The pointer stuff is not implemented yet, though.' id 'abbdcc1a-5f2e-604d-a19b-2f3e2614c4a7' date '22 June 2011' time '4:57:19 am' author 'Richo' ancestors ((name 'CTranslator-Richo.3' message '* Separated the header from the sources.* Added CTranslatedProgram>>#saveInDirectory: which saves both .h and .c files.' id '19de0395-e830-e04f-aea4-ded69ff105f9' date '22 June 2011' time '11:03:09 am' author 'Richo' ancestors ((name 'CTranslator-Richo.2' message '* Changed CTranslatedProgram>>#mainImplementation to make "main" return an int and avoid a compiler warning.' id '9aa66050-6af6-d445-b005-5fdff51d125c' date '21 June 2011' time '4:13:58 am' author 'Richo' ancestors ((name 'CTranslator-Richo.1' message '* First version. It was extracted from the SqueakNxt-Compiler project.' id '84886114-5473-d547-998a-bd87dc30db70' date '21 June 2011' time '4:01:50 am' author 'Richo' ancestors () stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())